/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üí∞ EXPENSES CONTROLLER
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π —Ä–∞—Å—Ö–æ–¥–æ–≤
 */

import { ExpensesTemplate } from './expenses.template.js';
import { validateRequired, validatePositiveNumber, validateDate } from '../../utils/validators.js';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –º–æ–¥—É–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
 */
export class ExpensesController {
    /**
     * @param {Object} app - –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    constructor(app) {
        this.app = app;
        this.state = {
            expenses: [],
            isLoading: false,
            error: null
        };
        this.firestoreService = null;
        this.toastComponent = null;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async fetchData() {
        this.state.isLoading = true;
        this.state.error = null;

        try {
            // –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
            this.firestoreService = this.app.getService('firestore');
            this.toastComponent = this.app.getService('toast');

            if (!this.firestoreService) {
                throw new Error('FirestoreService not available');
            }

            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            const userId = this.app.state.user?.uid;
            const monthId = this.app.state.currentMonth;

            if (userId && monthId) {
                this.state.expenses = await this.firestoreService.getExpenses(userId, monthId);
            }
        } catch (error) {
            console.error('Error fetching expenses:', error);
            this.state.error = error.message;
        } finally {
            this.state.isLoading = false;
        }
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ UI
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    render(container) {
        if (!container) return;

        const t = this.app.translations[this.app.state.language];
        container.innerHTML = ExpensesTemplate.render(this.state, t, this.app.state.currency);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
     */
    setupEventListeners(container) {
        if (!container) return;

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        const addBtn = container.querySelector('#add-expense-btn');
        if (addBtn) {
            addBtn.addEventListener('click', () => this.openAddExpenseModal());
        }

        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        container.querySelectorAll('.edit-expense-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const expenseId = e.currentTarget.dataset.id;
                this.editExpense(expenseId);
            });
        });

        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        container.querySelectorAll('.delete-expense-btn').forEach(btn => {
            btn.addEventListener('click', async (e) => {
                const expenseId = e.currentTarget.dataset.id;
                await this.deleteExpense(expenseId);
            });
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
     */
    openAddExpenseModal() {
        const t = this.app.translations[this.app.state.language];
        const formHtml = ExpensesTemplate.addExpenseForm(t, this.app.state.currentMonth);

        // –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π
        const { ModalComponent } = window;
        if (!ModalComponent) {
            console.error('ModalComponent not available');
            return;
        }

        const modal = new ModalComponent({
            title: t.addExpense || '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥',
            content: formHtml,
            size: 'medium',
            showClose: true,
            closeOnBackdrop: true,
            closeOnEsc: true,
            onOpen: (modalInstance) => {
                // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ footer
                const footer = `
                    <div class="flex justify-end gap-3">
                        <button type="button" class="btn-secondary modal-cancel-btn">
                            ${t.cancel || '–û—Ç–º–µ–Ω–∞'}
                        </button>
                        <button type="button" class="premium-btn modal-save-btn">
                            ${t.save || '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </button>
                    </div>
                `;
                modalInstance.updateFooter(footer);

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                const saveBtn = modalInstance.element.querySelector('.modal-save-btn');
                const cancelBtn = modalInstance.element.querySelector('.modal-cancel-btn');

                if (saveBtn) {
                    saveBtn.addEventListener('click', async () => {
                        const success = await this.saveExpense();
                        if (success) {
                            modalInstance.close();
                        }
                    });
                }

                if (cancelBtn) {
                    cancelBtn.addEventListener('click', () => {
                        modalInstance.close();
                    });
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ñ–æ—Ä–º–µ
                const form = modalInstance.element.querySelector('#expense-form');
                if (form) {
                    form.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const success = await this.saveExpense();
                        if (success) {
                            modalInstance.close();
                        }
                    });
                }
            }
        });

        modal.open();
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥
     * @param {string} expenseId - ID —Ä–∞—Å—Ö–æ–¥–∞
     */
    async editExpense(expenseId) {
        const expense = this.state.expenses.find(e => e.id === expenseId);
        if (!expense) return;

        const t = this.app.translations[this.app.state.language];
        const formHtml = ExpensesTemplate.editExpenseForm(expense, t);

        // –°–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π
        const { ModalComponent } = window;
        if (!ModalComponent) {
            console.error('ModalComponent not available');
            return;
        }

        const modal = new ModalComponent({
            title: t.editExpense || '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥',
            content: formHtml,
            size: 'medium',
            showClose: true,
            closeOnBackdrop: true,
            closeOnEsc: true,
            onOpen: (modalInstance) => {
                // –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ footer
                const footer = `
                    <div class="flex justify-end gap-3">
                        <button type="button" class="btn-secondary modal-cancel-btn">
                            ${t.cancel || '–û—Ç–º–µ–Ω–∞'}
                        </button>
                        <button type="button" class="premium-btn modal-save-btn">
                            ${t.save || '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                        </button>
                    </div>
                `;
                modalInstance.updateFooter(footer);

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                const saveBtn = modalInstance.element.querySelector('.modal-save-btn');
                const cancelBtn = modalInstance.element.querySelector('.modal-cancel-btn');

                if (saveBtn) {
                    saveBtn.addEventListener('click', async () => {
                        const success = await this.updateExpense(expenseId);
                        if (success) {
                            modalInstance.close();
                        }
                    });
                }

                if (cancelBtn) {
                    cancelBtn.addEventListener('click', () => {
                        modalInstance.close();
                    });
                }

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ñ–æ—Ä–º–µ
                const form = modalInstance.element.querySelector('#expense-form');
                if (form) {
                    form.addEventListener('submit', async (e) => {
                        e.preventDefault();
                        const success = await this.updateExpense(expenseId);
                        if (success) {
                            modalInstance.close();
                        }
                    });
                }
            }
        });

        modal.open();
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–∞
     * @param {Object} expense - –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validateExpenseData(expense) {
        const errors = [];

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryValidation = validateRequired(expense.category, 'Category');
        if (!categoryValidation.valid) {
            errors.push(categoryValidation.error);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        const amountValidation = validatePositiveNumber(expense.amount);
        if (!amountValidation.valid) {
            errors.push(amountValidation.error);
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        const dateValidation = validateDate(expense.date);
        if (!dateValidation.valid) {
            errors.push(dateValidation.error);
        }

        return {
            valid: errors.length === 0,
            errors
        };
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥
     */
    async saveExpense() {
        try {
            const form = document.getElementById('expense-form');
            if (!form) return false;

            const formData = new FormData(form);
            const expense = {
                category: formData.get('category')?.trim(),
                amount: parseFloat(formData.get('amount')),
                date: formData.get('date'),
                comment: formData.get('comment')?.trim() || '',
                monthId: this.app.state.currentMonth,
                createdAt: new Date()
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = this.validateExpenseData(expense);
            if (!validation.valid) {
                if (this.toastComponent) {
                    this.toastComponent.show(validation.errors[0], 'error');
                }
                return false;
            }

            const userId = this.app.state.user?.uid;
            if (!userId) {
                if (this.toastComponent) {
                    this.toastComponent.show('User not authenticated', 'error');
                }
                return false;
            }

            await this.firestoreService.addExpense(userId, expense);

            if (this.toastComponent) {
                const t = this.app.translations[this.app.state.language];
                this.toastComponent.show(t.expenseAdded || '–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
            }

            await this.refresh();
            return true;
        } catch (error) {
            console.error('Error saving expense:', error);
            if (this.toastComponent) {
                const t = this.app.translations[this.app.state.language];
                this.toastComponent.show(t.error || '–û—à–∏–±–∫–∞', 'error');
            }
            return false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
     * @param {string} expenseId - ID —Ä–∞—Å—Ö–æ–¥–∞
     */
    async updateExpense(expenseId) {
        try {
            const form = document.getElementById('expense-form');
            if (!form) return false;

            const formData = new FormData(form);
            const updates = {
                category: formData.get('category')?.trim(),
                amount: parseFloat(formData.get('amount')),
                date: formData.get('date'),
                comment: formData.get('comment')?.trim() || ''
            };

            // –í–∞–ª–∏–¥–∞—Ü–∏—è
            const validation = this.validateExpenseData(updates);
            if (!validation.valid) {
                if (this.toastComponent) {
                    this.toastComponent.show(validation.errors[0], 'error');
                }
                return false;
            }

            const userId = this.app.state.user?.uid;
            if (!userId) {
                if (this.toastComponent) {
                    this.toastComponent.show('User not authenticated', 'error');
                }
                return false;
            }

            await this.firestoreService.updateExpense(userId, expenseId, updates);

            if (this.toastComponent) {
                const t = this.app.translations[this.app.state.language];
                this.toastComponent.show(t.expenseUpdated || '–†–∞—Å—Ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
            }

            await this.refresh();
            return true;
        } catch (error) {
            console.error('Error updating expense:', error);
            if (this.toastComponent) {
                const t = this.app.translations[this.app.state.language];
                this.toastComponent.show(t.error || '–û—à–∏–±–∫–∞', 'error');
            }
            return false;
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ö–æ–¥
     * @param {string} expenseId - ID —Ä–∞—Å—Ö–æ–¥–∞
     */
    async deleteExpense(expenseId) {
        const t = this.app.translations[this.app.state.language];
        const confirmed = confirm(t.confirmDelete || '–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?');
        if (!confirmed) return;

        try {
            const userId = this.app.state.user?.uid;
            if (!userId) return;

            await this.firestoreService.deleteExpense(userId, expenseId);

            if (this.toastComponent) {
                this.toastComponent.show(t.expenseDeleted || '–†–∞—Å—Ö–æ–¥ —É–¥–∞–ª–µ–Ω', 'success');
            }

            await this.refresh();
        } catch (error) {
            console.error('Error deleting expense:', error);
            if (this.toastComponent) {
                this.toastComponent.show(t.error || '–û—à–∏–±–∫–∞', 'error');
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ UI
     */
    async refresh() {
        await this.fetchData();
        const container = document.getElementById('expenses-content');
        if (container) {
            this.render(container);
            this.setupEventListeners(container);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        this.state = {
            expenses: [],
            isLoading: false,
            error: null
        };
    }
}
