/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üìÖ CALENDAR CONTROLLER
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */

import { CalendarTemplate } from './calendar.template.js';
import { translations } from '../../translations.js';

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ —Å–æ–±—ã—Ç–∏–π
 */
export class CalendarController {
    /**
     * @param {Object} app - –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    constructor(app) {
        this.app = app;
        this.firestoreService = app.getService('firestore');
        this.state = {
            events: [],
            currentDate: new Date(),
            selectedDate: null,
            loading: false
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
     */
    get currentLanguage() {
        return this.app.state.language || 'ru';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã
     */
    get t() {
        return translations[this.currentLanguage];
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
     */
    async fetchData() {
        if (!this.app.state.user) {
            console.warn('User not authenticated');
            return;
        }

        this.state.loading = true;
        
        try {
            const userId = this.app.state.user.uid;
            const monthId = this.getMonthId(this.state.currentDate);
            
            // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            this.state.events = await this.firestoreService.getCalendarEvents(userId, monthId);
            
            console.log(`Loaded ${this.state.events.length} calendar events for ${monthId}`);
        } catch (error) {
            console.error('Error fetching calendar data:', error);
            this.state.events = [];
        } finally {
            this.state.loading = false;
        }
    }

    /**
     * –û—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
     */
    render(container) {
        if (!container) return;
        
        const html = CalendarTemplate.render(this.state, this.t);
        container.innerHTML = html;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
     * @param {HTMLElement} container - –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
     */
    setupEventListeners(container) {
        if (!container) return;

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
        const prevBtn = container.querySelector('#calendar-prev-month');
        const nextBtn = container.querySelector('#calendar-next-month');
        
        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.navigateMonth(-1));
        }
        
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.navigateMonth(1));
        }

        // –ö–ª–∏–∫ –ø–æ –¥–Ω—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const days = container.querySelectorAll('.calendar-day:not(.other-month)');
        days.forEach(day => {
            day.addEventListener('click', (e) => {
                const dateStr = e.currentTarget.dataset.date;
                if (dateStr) {
                    this.selectDate(dateStr);
                }
            });
        });

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        const addEventBtn = container.querySelector('#add-event-btn');
        if (addEventBtn) {
            addEventBtn.addEventListener('click', () => this.openAddEventModal());
        }

        // –ö–ª–∏–∫ –ø–æ —Å–æ–±—ã—Ç–∏—é
        const eventItems = container.querySelectorAll('.event-item');
        eventItems.forEach(item => {
            item.addEventListener('click', (e) => {
                const eventId = e.currentTarget.dataset.eventId;
                if (eventId) {
                    this.openEditEventModal(eventId);
                }
            });
        });
    }

    /**
     * –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
     * @param {number} direction - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (-1 –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, 1 –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ)
     */
    async navigateMonth(direction) {
        const newDate = new Date(this.state.currentDate);
        newDate.setMonth(newDate.getMonth() + direction);
        this.state.currentDate = newDate;
        
        await this.refresh();
    }

    /**
     * –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
     * @param {string} dateStr - –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
     */
    selectDate(dateStr) {
        this.state.selectedDate = dateStr;
        
        // –û–±–Ω–æ–≤–∏—Ç—å UI
        const container = document.getElementById(this.containerId || 'calendar-content');
        if (container) {
            // –£–±—Ä–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –¥–Ω–µ–π
            container.querySelectorAll('.calendar-day').forEach(day => {
                day.classList.remove('selected');
            });
            
            // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
            const selectedDay = container.querySelector(`[data-date="${dateStr}"]`);
            if (selectedDay) {
                selectedDay.classList.add('selected');
            }
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     */
    openAddEventModal() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        console.log('Open add event modal for date:', this.state.selectedDate);
        alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     */
    openEditEventModal(eventId) {
        const event = this.state.events.find(e => e.id === eventId);
        if (event) {
            console.log('Open edit event modal for:', event);
            alert('–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
        }
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
     * @param {Object} eventData - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
     */
    async addEvent(eventData) {
        if (!this.app.state.user) {
            console.error('User not authenticated');
            return;
        }

        try {
            const userId = this.app.state.user.uid;
            const eventId = await this.firestoreService.addCalendarEvent(userId, eventData);
            
            console.log('Event added:', eventId);
            await this.refresh();
            
            return eventId;
        } catch (error) {
            console.error('Error adding event:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     * @param {Object} updates - –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –ø–æ–ª—è
     */
    async updateEvent(eventId, updates) {
        if (!this.app.state.user) {
            console.error('User not authenticated');
            return;
        }

        try {
            const userId = this.app.state.user.uid;
            await this.firestoreService.updateCalendarEvent(userId, eventId, updates);
            
            console.log('Event updated:', eventId);
            await this.refresh();
        } catch (error) {
            console.error('Error updating event:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ
     * @param {string} eventId - ID —Å–æ–±—ã—Ç–∏—è
     */
    async deleteEvent(eventId) {
        if (!this.app.state.user) {
            console.error('User not authenticated');
            return;
        }

        if (!confirm(this.t.deleteConfirm)) {
            return;
        }

        try {
            const userId = this.app.state.user.uid;
            await this.firestoreService.deleteCalendarEvent(userId, eventId);
            
            console.log('Event deleted:', eventId);
            await this.refresh();
        } catch (error) {
            console.error('Error deleting event:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
     */
    async refresh() {
        await this.fetchData();
        
        const container = document.getElementById(this.containerId || 'calendar-content');
        if (container) {
            this.render(container);
            this.setupEventListeners(container);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    cleanup() {
        this.state = {
            events: [],
            currentDate: new Date(),
            selectedDate: null,
            loading: false
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å ID –º–µ—Å—è—Ü–∞ –∏–∑ –¥–∞—Ç—ã
     * @param {Date} date - –î–∞—Ç–∞
     * @returns {string} ID –º–µ—Å—è—Ü–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM
     */
    getMonthId(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        return `${year}-${month}`;
    }
}
