/**
 * โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
 * ๐ฐ NEWS MODULE
 * โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
 * 
 * ะะพะดัะปั ะฝะพะฒะพััะตะน ั ัะธะปัััะฐัะธะตะน ะธ ะฟะฐะณะธะฝะฐัะธะตะน
 * 
 * ะคัะฝะบัะธะพะฝะฐะปัะฝะพััั:
 * - ะะฐะณััะทะบะฐ ะผะธัะพะฒัั ะฝะพะฒะพััะตะน ัะตัะตะท Currents API
 * - ะคะธะปัััะฐัะธั ะฟะพ ัััะฐะฝะฐะผ (US, GB, RU, AZ ะธ ะดั.)
 * - ะคะธะปัััะฐัะธั ะฟะพ ะบะฐัะตะณะพัะธัะผ (business, technology, sports ะธ ะดั.)
 * - ะะฐะณะธะฝะฐัะธั ะฝะพะฒะพััะตะน
 * - ะััะธัะพะฒะฐะฝะธะต ะทะฐะฟัะพัะพะฒ
 * - Fallback ะดะฐะฝะฝัะต ะฟัะธ ะฝะตะดะพัััะฟะฝะพััะธ API
 * - ะะดะฐะฟัะธะฒะฝะพะต ะพัะพะฑัะฐะถะตะฝะธะต ะบะฐััะพัะตะบ ะฝะพะฒะพััะตะน
 * 
 * ะััะธัะตะบัััะฐ:
 * - Module: ะฃะฟัะฐะฒะปะตะฝะธะต ะถะธะทะฝะตะฝะฝัะผ ัะธะบะปะพะผ
 * - Controller: ะะธะทะฝะตั-ะปะพะณะธะบะฐ, ัะธะปัััะฐัะธั, ะฟะฐะณะธะฝะฐัะธั
 * - Template: ะะตะฝะตัะฐัะธั HTML ะดะปั ะบะฐััะพัะตะบ ะฝะพะฒะพััะตะน
 * - Service: ะะทะฐะธะผะพะดะตะนััะฒะธะต ั Currents API
 * 
 * @module modules/news
 * @requires core/app
 * @requires services/news
 * 
 * @example
 * const news = new NewsModule(app);
 * await news.load();
 */

export class NewsModule {
  /**
   * ะกะพะทะดะฐะตั ัะบะทะตะผะฟะปัั ะผะพะดัะปั News
   * @param {OrdinaApp} app - ะญะบะทะตะผะฟะปัั ะณะปะฐะฒะฝะพะณะพ ะฟัะธะปะพะถะตะฝะธั
   */
  constructor(app) {
    this.app = app;
    this.controller = null;
    this.containerId = 'news-content';
    this.isLoaded = false;
  }

  /**
   * ะะฐะณััะทะบะฐ ะธ ะธะฝะธัะธะฐะปะธะทะฐัะธั ะผะพะดัะปั
   * ะัะฟะพะปะฝัะตั ะปะตะฝะธะฒัั ะทะฐะณััะทะบั ะบะพะฝััะพะปะปะตัะฐ ะฟัะธ ะฟะตัะฒะพะผ ะฒัะทะพะฒะต
   * ะัะธ ะฟะพะฒัะพัะฝัั ะฒัะทะพะฒะฐั ะพะฑะฝะพะฒะปัะตั ะดะฐะฝะฝัะต ะฑะตะท ะฟะตัะตะทะฐะณััะทะบะธ
   * 
   * @async
   * @returns {Promise<void>}
   * @throws {Error} ะัะปะธ ะฝะต ัะดะฐะปะพัั ะทะฐะณััะทะธัั ะบะพะฝััะพะปะปะตั ะธะปะธ ะดะฐะฝะฝัะต
   */
  async load() {
    if (this.isLoaded) {
      await this.controller.refresh();
      return;
    }

    const { NewsController } = await import('./news.controller.js');
    this.controller = new NewsController(this.app);
    
    await this.controller.init();
    this.isLoaded = true;
  }

  /**
   * ะัะณััะทะบะฐ ะผะพะดัะปั ะธ ะพัะธััะบะฐ ัะตััััะพะฒ
   * ะัะทัะฒะฐะตััั ะฟัะธ ะฟะตัะตะบะปััะตะฝะธะธ ะฝะฐ ะดััะณะพะน ะผะพะดัะปั
   * 
   * @returns {void}
   */
  unload() {
    if (this.controller) {
      this.controller.destroy();
    }
    this.isLoaded = false;
  }

  /**
   * ะะฑะฝะพะฒะปะตะฝะธะต ะดะฐะฝะฝัั ะผะพะดัะปั
   * ะะตัะตะทะฐะณััะถะฐะตั ะฝะพะฒะพััะธ ั ัะตะบััะธะผะธ ัะธะปัััะฐะผะธ
   * 
   * @async
   * @returns {Promise<void>}
   */
  async refresh() {
    if (this.controller) {
      await this.controller.refresh();
    }
  }
}
